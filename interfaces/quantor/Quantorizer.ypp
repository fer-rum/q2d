%header{
extern "C" {
#include "quantor.h"
#include <strings.h>
}
#include <vector>
#include <cctype>
#include <cassert>
#include "Circuit.hpp"
#include "QIContext.h"
#include "ParseException.h"
}

/**
 * Quantorizer specification for the wisent parser generator.
 * The generated Quantorizer class transforms a function circuit
 * specification into a QBF problem and uses the QBF solver Quantor
 * to determine an implementing circuit configuration if it exists.
 * The only public utility method is the static Quantorizer::solve
 * function.
 *
 * @author Thomas B. Preu√üer <thomas.preusser@utexas.edu>
 */
%class q2d::quantor::Quantorizer {
  Quantor *const  quantor;
  unsigned        max_var;
#ifndef NDEBUG
  unsigned        max_named;
#endif

  std::vector<int>  clauses;
  QIContext const  *context;
  char      const  *formula;

//- Life Cycle ---------------------------------------------------------------
private:
  Quantorizer()
    : quantor(quantor_new()), max_var(0), context(0), formula(0) {}
  ~Quantorizer() {
    quantor_delete(quantor);
  }

//- Problem Building ---------------------------------------------------------
  template<typename IT>
  void openScope(QuantorQuantificationType const  type, IT  vars);
  void closeScope() { quantor_add(quantor, 0); }

  void append(QIContext const &ctx) {
    context = &ctx;
    Iterator<QList<std::string>::const_iterator>  formulas = ctx.functionIterator();
    while(formulas) {
      formula = formulas++->c_str();
      parse();
    }
  }

  void finish() {
    // Finish Problem Specification
    closeScope();
    for(int  lit : clauses)  quantor_add(quantor, lit);
  }

  QuantorResult solve(std::vector<int> &sol) {
    QuantorResult const  res = quantor_sat(quantor);
    if(res == QUANTOR_RESULT_SATISFIABLE) {
      int const *s = quantor_assignment(quantor);
      while(*s)  sol.push_back(*s++);
    }
    return  res;
  }

//- Public Usage Interface ---------------------------------------------------
public:
  static QuantorResult solve(Circuit const &ctx, std::vector<int> &sol);
  static char const* resultText(QuantorResult const  res);

//- Parser Interface Methods -------------------------------------------------
private:
  unsigned nextToken(YYSVal &sval);
  void error(std::string  msg) {
    throw  ParseException(msg, *context);
  }

//- Custom Parser Helpers ----------------------------------------------------
private:
  unsigned makeAuxiliary() {
    unsigned const  res = ++max_var;
    quantor_add(quantor, res);
    return  res;
  }
  void addClause(int const  a, int const  b) {
    clauses.push_back(a);
    clauses.push_back(b);
    clauses.push_back(0);
  }
  void addClause(int const  a, int const  b, int const  c) {
    clauses.push_back(a);
    clauses.push_back(b);
    clauses.push_back(c);
    clauses.push_back(0);
  }
}

%sval unsigned
%impl {
#include "Quantorizer.hpp"

using namespace q2d::quantor;

unsigned Quantorizer::nextToken(YYSVal &sval) {
  assert(formula != 0);
  while(true) {
    char const  c = *formula++;
    switch(c) {
    case '\0':
      formula = 0;
    case '(':
    case ')':
    case '=':
      return  c;
    case '!':
    case '~':
      return  NOT;
    case '&':
      if(*formula == '&')  formula++;
    case '*':
      return  AND;
    case '|':
      if(*formula == '|')  formula++;
    case '+':
      return  OR;
    case '^':
      return  XOR;
    }
    if(isspace(c))  continue;
    if(isalpha(c) || (c == '_')) {
      char const *p = formula--;
      while(isalnum(*p))  p++;
      unsigned const  len = p-formula;
      unsigned  res = 0;
      switch(len) {
      case 2:
    if(strncasecmp(formula, "OR", 2) == 0)  res = OR;
    break;
      case 3:
    if     (strncasecmp(formula, "AND", 3) == 0)  res = AND;
    else if(strncasecmp(formula, "XOR", 3) == 0)  res = XOR;
    else if(strncasecmp(formula, "NOR", 3) == 0)  res = NOR;
    else if(strncasecmp(formula, "NOT", 3) == 0)  res = NOT;
    break;
      case 4:
    if     (strncasecmp(formula, "NAND", 4) == 0)  res = NAND;
    else if(strncasecmp(formula, "XNOR", 4) == 0)  res = XNOR;
    break;
      }
      if(res == 0) {
    unsigned const  var = (*context)[std::string(formula, len)];
    assert(var > 0);
    assert(var <= max_named);
    sval = var;
    res  = IDENT;
      }
      formula = p;
      return  res;
    } // isalpha(c)
    error(std::string("Illegal Character: '") + c + "'");
    assert(false);
    return  0;
  }
}

template<typename IT>
void Quantorizer::openScope(QuantorQuantificationType const  type, IT  vars) {
  quantor_scope(quantor, type);
  while(vars) {
    unsigned const  var = *vars++;
    assert(var > 0);
    if(var > max_var)  max_var = var;
    quantor_add(quantor, var);
  }
}

QuantorResult Quantorizer::solve(Circuit const &ctx, std::vector<int> &sol) {
  Quantorizer q;

  // Quantifier Preamble
  q.openScope(QUANTOR_EXISTENTIAL_VARIABLE_TYPE, ctx.getConfigs());
  q.closeScope();
  q.openScope(QUANTOR_UNIVERSAL_VARIABLE_TYPE,   ctx.getInputs());
  q.closeScope();
  q.openScope(QUANTOR_EXISTENTIAL_VARIABLE_TYPE, ctx.getNodes());
  // leave it open!

#ifndef NDEBUG
  q.max_named = q.max_var;
#endif

  { // Parse in Component Specifications
    auto  ctxs = ctx.getContexts();
    while(ctxs)  q.append(*ctxs++);
  }

  q.finish();
  return  q.solve(sol);
}

char const* Quantorizer::resultText(QuantorResult const  res) {
  static char const *const  TEXTS[] = {
    "UNKNOWN", "SAT", "UNSAT", "TIMEOUT", "SPACEOUT"
  };
  unsigned const  r = res/10;
  return  TEXTS[r>4? 0 : r];
}
}

%%
%right NOT
%left AND OR XOR NAND NOR XNOR
%token IDENT
%start spec
%%
spec    : expr '=' expr {
        addClause( $1, -$3);
        addClause(-$1,  $3);
          }
expr    : expr AND  expr {
        unsigned const  res = makeAuxiliary();
        addClause( res, -$1, -$3);
        addClause(-res,  $1);
        addClause(-res,  $3);
        $$ = res;
          }
        | expr OR   expr {
        unsigned const  res = makeAuxiliary();
        addClause(-res,  $1, $3);
        addClause( res, -$1);
        addClause( res, -$3);
        $$ = res;
          }
        | expr XOR  expr {
        unsigned const  res = makeAuxiliary();
        addClause(-res, -$1, -$3);
        addClause(-res,  $1,  $3);
        addClause( res, -$1,  $3);
        addClause( res,  $1, -$3);
        $$ = res;
          }
        | expr NAND expr {
        unsigned const  res = makeAuxiliary();
        addClause(-res, -$1, -$3);
        addClause( res,  $1);
        addClause( res,  $3);
        $$ = res;
          }
        | expr NOR  expr {
        unsigned const  res = makeAuxiliary();
        addClause( res,  $1, $3);
        addClause(-res, -$1);
        addClause(-res, -$3);
        $$ = res;
          }
        | expr XNOR expr {
        unsigned const  res = makeAuxiliary();
        addClause( res, -$1, -$3);
        addClause( res,  $1,  $3);
        addClause(-res, -$1,  $3);
        addClause(-res,  $1, -$3);
        $$ = res;
          }
        | prim           { $$ = $1; }
prim    : IDENT          { $$ = $1; }
    | '(' expr ')'   { $$ = $2; }
    | NOT prim {
        unsigned const  res = makeAuxiliary();
        addClause( res,  $2);
        addClause(-res, -$2);
        $$ = res;
      }
