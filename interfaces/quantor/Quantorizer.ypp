%header{
#include <vector>
#include <map>

#include "Context.h"
#include "ParseException.h"
#include "Result.h"

namespace q2d {
  namespace quantor {
    class SVal;
  }
}
}

/**
 * Quantorizer specification for the wisent parser generator.
 * The generated Quantorizer class transforms a function circuit
 * specification into a QBF problem and uses the QBF solver Quantor
 * to determine an implementing circuit configuration if it exists.
 * The only public utility method is the static Quantorizer::solve
 * function.
 *
 * @author Thomas B. Preu√üer <thomas.preusser@utexas.edu>
 */
%class q2d::quantor::Quantorizer {
  // Variable Bookkeeping
  unsigned  max_var;

  typedef unsigned Variable;
  std::map<Variable, unsigned>  varConfigs;
  std::map<Variable, unsigned>  varInputs;
  std::map<Variable, unsigned>  varNodes;

  std::vector<unsigned>  varAux;
  std::vector<int>       clauses;

  // Current Parsing State
  Context    *context;
  char const *formula;

//- Life Cycle ---------------------------------------------------------------
public:
  Quantorizer();
  ~Quantorizer();

//- Parser Interface Methods -------------------------------------------------
private:
  void error(std::string  msg);
  unsigned nextToken(YYSVal &sval);

//- Private Parser Helpers ---------------------------------------------------
private:
  unsigned getVar(std::string const &name);
  unsigned makeAuxiliary();
  void addClause(SVal const &clause);
  void addClause(int const  a);
  void addClause(int const  a, int const  b);
  void addClause(int const  a, int const  b, int const  c);

//- Usage Interface ----------------------------------------------------------
public:
  // Builds a problem by adding contexts with formulae.
  void set(Context &ctx) {
    context = &ctx;
  }
  void parse(char const *fct) throw (ParseException);

  // Solves the current problem and clears this Quantorizers state.
  Result solve(std::vector<int> &sol);
}

%sval SVal
%impl {
#include "Quantorizer.hpp"

#include <cctype>
#include <cassert>
#include <string.h>

extern "C" {
#include "Quantor.h"
}

using namespace q2d::quantor;

class q2d::quantor::SVal {
  std::vector<int>  lits;

public:
  SVal() {}
  SVal(int const  v) { lits.push_back(v); }
  ~SVal() {}

public:
  operator int() const {
    assert(lits.size() == 1);
    return  lits[0];
  }
  void add(int const  v) { lits.push_back(v); }

public:
  auto begin() const -> decltype(lits.begin()) { return  lits.begin(); }
  auto end()   const -> decltype(lits.end())   { return  lits.end(); }
};

//- Life Cycle ---------------------------------------------------------------
Quantorizer::Quantorizer() : max_var(0), context(0), formula(0) {}
Quantorizer::~Quantorizer() {}

//- Parser Interface Methods -------------------------------------------------
inline void Quantorizer::error(std::string  msg) {
  throw  ParseException(msg, 0);
}

unsigned Quantorizer::nextToken(YYSVal &sval) {
  assert(formula != 0);
  while(true) {
    char const  c = *formula++;
    switch(c) {
    case '\0':
    case '(':
    case ')':
    case '[':
    case ']':
    case '=':
    case ',':
      return  c;
    case '!':
    case '~':
      return  NOT;
    case '&':
      if(*formula == '&')  formula++;
    case '*':
      return  AND;
    case '|':
      if(*formula == '|')  formula++;
    case '+':
      return  OR;
    case '^':
      return  XOR;
    }
    if(isspace(c))  continue;
    if(isalpha(c) || (c == '_')) {
      char const *p = formula--;
      while(isalnum(*p) || (*p == '_') || (*p == '-') || (*p == '/'))  p++;
      unsigned const  len = p-formula;
      unsigned  res = 0;
      switch(len) {
      case 2:
    if(strncmp(formula, "or", 2) == 0)  res = OR;
    break;
      case 3:
    if     (strncmp(formula, "and", 3) == 0)  res = AND;
    else if(strncmp(formula, "xor", 3) == 0)  res = XOR;
    else if(strncmp(formula, "nor", 3) == 0)  res = NOR;
    else if(strncmp(formula, "not", 3) == 0)  res = NOT;
    break;
      case 4:
    if     (strncmp(formula, "nand", 4) == 0)  res = NAND;
    else if(strncmp(formula, "xnor", 4) == 0)  res = XNOR;
    break;
      }
      if(res == 0) {
    unsigned const  var = getVar(std::string(formula, len));
    sval = var;
    res  = VAR;
      }
      formula = p;
      return  res;
    } // isalpha(c)
    error(std::string("Illegal Character: '") + c + "'");
    assert(false);
    return  0;
  }
}

//- Private Parser Helpers ---------------------------------------------------
unsigned Quantorizer::getVar(std::string const &name) {
  Variable const  var = (*context)[name];
  std::map<Variable, unsigned> *cat;
  switch(context->typeOf(var)) {
  case VariableType::CONFIG:  cat = &varConfigs; break;
  case VariableType::INPUT:   cat = &varInputs;  break;
  case VariableType::NODE:    cat = &varNodes;   break;
  default: error("Unknown identifier: " + name);
  }

  // Check if variable is known already
  auto const  v = cat->find(var);
  if(v != cat->end())  return  v->second;

  // Register new variable according to its type
  return (*cat)[var] = ++max_var;
}

inline unsigned Quantorizer::makeAuxiliary() {
  unsigned const  id = ++max_var;
  varAux.push_back(id);
  return  id;
}

inline void Quantorizer::addClause(SVal const& clause) {
  for(int const  lit : clause)  clauses.push_back(lit);
  clauses.push_back(0);
}
inline void Quantorizer::addClause(int const  a) {
  clauses.push_back(a);
  clauses.push_back(0);
}
inline void Quantorizer::addClause(int const  a, int const  b) {
  clauses.push_back(a);
  clauses.push_back(b);
  clauses.push_back(0);
}
inline void Quantorizer::addClause(int const  a, int const  b, int const  c) {
  clauses.push_back(a);
  clauses.push_back(b);
  clauses.push_back(c);
  clauses.push_back(0);
}

//- Public Usage Interface ---------------------------------------------------
void Quantorizer::parse(char const *fct) throw (ParseException) {
  formula = fct;
  try {
    parse();
  }
  catch(ParseException &e) {
    e.position(formula-fct);
    throw;
  }
}

Result Quantorizer::solve(std::vector<int> &sol) {
  q2d::quantor::Quantor         q;      // solver
  std::map<unsigned, Variable>  confs;  // reverse map for configs

  // Problem Building
  q.scope(QUANTOR_EXISTENTIAL_VARIABLE_TYPE);
  for(auto const &e : varConfigs) {
    q.add(e.second);
    confs.emplace(e.second, e.first);
  }
  varConfigs.clear();
  q.add(0);

  q.scope(QUANTOR_UNIVERSAL_VARIABLE_TYPE);
  for(auto const &e : varInputs)  q.add(e.second);
  varInputs.clear();
  q.add(0);

  q.scope(QUANTOR_EXISTENTIAL_VARIABLE_TYPE);
  for(auto const &e : varNodes)  q.add(e.second);
  varNodes.clear();
  for(unsigned  v : varAux)  q.add(v);
  varAux.clear();
  q.add(0);

  for(int  lit : clauses)  q.add(lit);
  clauses.clear();

  // Solve Problem
  Result const  res = q.sat();
  if(res) {
    auto const  end = confs.end();
    for(int const *s = q.assignment(); *s; s++) {
      auto const  it = confs.find(abs(*s));
      if(it != end)  sol.push_back(*s < 0? -it->second : it->second);
    }
  }
  return  res;
}

} // impl

%%
%right NOT
%left AND OR XOR NAND NOR XNOR
%token VAR
%start spec
%%
spec : expr { addClause((int)$1); }
     | expr '=' expr {
        addClause( $1, -$3);
        addClause(-$1,  $3);
       }
     | '[' list ']'  { addClause($2); }
list : expr          { $$ = $1; }
     | list ',' expr { $$ = $1; $$.add($3); }

expr : expr AND  expr {
        unsigned const  res = makeAuxiliary();
        addClause( res, -$1, -$3);
        addClause(-res,  $1);
        addClause(-res,  $3);
        $$ = res;
       }
     | expr OR   expr {
        unsigned const  res = makeAuxiliary();
        addClause(-res,  $1, $3);
        addClause( res, -$1);
        addClause( res, -$3);
        $$ = res;
       }
     | expr XOR  expr {
        unsigned const  res = makeAuxiliary();
        addClause(-res, -$1, -$3);
        addClause(-res,  $1,  $3);
        addClause( res, -$1,  $3);
        addClause( res,  $1, -$3);
        $$ = res;
       }
     | expr NAND expr {
        unsigned const  res = makeAuxiliary();
        addClause(-res, -$1, -$3);
        addClause( res,  $1);
        addClause( res,  $3);
        $$ = res;
       }
     | expr NOR  expr {
        unsigned const  res = makeAuxiliary();
        addClause( res,  $1, $3);
        addClause(-res, -$1);
        addClause(-res, -$3);
        $$ = res;
       }
     | expr XNOR expr {
        unsigned const  res = makeAuxiliary();
        addClause( res, -$1, -$3);
        addClause( res,  $1,  $3);
        addClause(-res, -$1,  $3);
        addClause(-res,  $1, -$3);
        $$ = res;
       }
     | prim         { $$ = $1; }

prim : VAR          { $$ =  $1; }
     | NOT prim     { $$ = -$2; }
     | '(' expr ')' { $$ =  $2; }
